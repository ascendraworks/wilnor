{"version":3,"file":"selector.is-selecting-entire-blocks.js","sources":["../../src/selectors/selector.get-selected-blocks.ts","../../src/selectors/selector.get-selection-end-point.ts","../../src/selectors/selector.get-selected-spans.ts","../../src/selectors/selector.get-active-annotations.ts","../../src/selectors/selector.get-active-list-item.ts","../../src/selectors/selector.get-active-style.ts","../../src/selectors/selector.get-next-inline-object.ts","../../src/selectors/selector.get-caret-word-selection.ts","../../src/selectors/selector.get-first-block.ts","../../src/selectors/selector.get-focus-block-object.ts","../../src/selectors/selector.get-focus-inline-object.ts","../../src/selectors/selector.get-focus-list-block.ts","../../src/selectors/selector.get-last-block.ts","../../src/selectors/selector.get-selection-start-block.ts","../../src/selectors/selector.get-previous-block.ts","../../src/selectors/selector.get-selection-end-block.ts","../../src/selectors/selector.get-next-block.ts","../../src/selectors/selector.get-selected-text-blocks.ts","../../src/selectors/selector.get-trimmed-selection.ts","../../src/selectors/selector.is-active-annotation.ts","../../src/selectors/selector.is-active-decorator.ts","../../src/selectors/selector.is-active-list-item.ts","../../src/selectors/selector.is-active-style.ts","../../src/selectors/selector.is-at-the-end-of-block.ts","../../src/selectors/selector.is-at-the-start-of-block.ts","../../src/selectors/selector.is-point-after-selection.ts","../../src/selectors/selector.is-point-before-selection.ts","../../src/selectors/selector.is-overlapping-selection.ts","../../src/selectors/selector.is-selecting-entire-blocks.ts"],"sourcesContent":["import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedBlocks: EditorSelector<\n  Array<{node: PortableTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks: Array<{node: PortableTextBlock; path: BlockPath}> = []\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startKey || !endKey) {\n    return selectedBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n\n      if (startKey === endKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endKey) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n      break\n    }\n\n    if (selectedBlocks.length > 0) {\n      selectedBlocks.push({node: block, path: [{_key: block._key}]})\n    }\n  }\n\n  return selectedBlocks\n}\n","import type {EditorSelectionPoint} from '..'\nimport type {EditorSelector} from '../editor/editor-selector'\n\n/**\n * @public\n */\nexport const getSelectionEndPoint: EditorSelector<\n  EditorSelectionPoint | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  return snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {ChildPath} from '../types/paths'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\n\n/**\n * @public\n */\nexport const getSelectedSpans: EditorSelector<\n  Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedSpans: Array<{\n    node: PortableTextSpan\n    path: ChildPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot)\n  const endPoint = getSelectionEndPoint(snapshot)\n\n  if (!startPoint || !endPoint) {\n    return selectedSpans\n  }\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedSpans\n  }\n\n  const startSpanKey = getChildKeyFromSelectionPoint(startPoint)\n  const endSpanKey = getChildKeyFromSelectionPoint(endPoint)\n\n  let startBlockFound = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (block._key === startBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (startSpanKey && child._key === startSpanKey) {\n          if (startPoint.offset < child.text.length) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n\n          if (startSpanKey === endSpanKey) {\n            break\n          }\n\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        if (selectedSpans.length > 0) {\n          selectedSpans.push({\n            node: child,\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n          })\n        }\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        if (endSpanKey && child._key === endSpanKey) {\n          if (endPoint.offset > 0) {\n            selectedSpans.push({\n              node: child,\n              path: [{_key: block._key}, 'children', {_key: child._key}],\n            })\n          }\n          break\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n\n      break\n    }\n\n    if (startBlockFound) {\n      for (const child of block.children) {\n        if (!isSpan(snapshot.context, child)) {\n          continue\n        }\n\n        selectedSpans.push({\n          node: child,\n          path: [{_key: block._key}, 'children', {_key: child._key}],\n        })\n      }\n    }\n  }\n\n  return selectedSpans\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getFocusSpan} from './selector.get-focus-span'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getActiveAnnotations: EditorSelector<Array<PortableTextObject>> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot)\n  const selectedSpans = getSelectedSpans(snapshot)\n  const focusSpan = getFocusSpan(snapshot)\n\n  if (selectedSpans.length === 0 || !focusSpan) {\n    return []\n  }\n\n  if (selectedSpans.length === 1 && isSelectionCollapsed(snapshot)) {\n    if (snapshot.context.selection.focus.offset === 0) {\n      return []\n    }\n    if (\n      snapshot.context.selection.focus.offset === focusSpan.node.text.length\n    ) {\n      return []\n    }\n  }\n\n  const activeAnnotations = snapshot.beta.activeAnnotations\n  const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n    isTextBlock(snapshot.context, block.node)\n      ? (block.node.markDefs ?? [])\n      : [],\n  )\n\n  return selectionMarkDefs.filter((markDef) =>\n    activeAnnotations.includes(markDef._key),\n  )\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveListItem: EditorSelector<\n  PortableTextListBlock['listItem'] | undefined\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstListItem = firstTextBlock.listItem\n\n  if (!firstListItem) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.listItem === firstListItem)) {\n    return firstListItem\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport const getActiveStyle: EditorSelector<PortableTextTextBlock['style']> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return undefined\n  }\n\n  const selectedBlocks = getSelectedBlocks(snapshot).map((block) => block.node)\n  const selectedTextBlocks = selectedBlocks.filter((block) =>\n    isTextBlock(snapshot.context, block),\n  )\n\n  const firstTextBlock = selectedTextBlocks.at(0)\n\n  if (!firstTextBlock) {\n    return undefined\n  }\n\n  const firstStyle = firstTextBlock.style\n\n  if (!firstStyle) {\n    return undefined\n  }\n\n  if (selectedTextBlocks.every((block) => block.style === firstStyle)) {\n    return firstStyle\n  }\n\n  return undefined\n}\n","import {isKeySegment, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {isSpan} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\n\n/**\n * @public\n */\nexport const getNextInlineObject: EditorSelector<\n  | {\n      node: PortableTextObject\n      path: ChildPath\n    }\n  | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionEndPoint = getSelectionEndPoint(snapshot)\n  const selectionEndPointChildKey =\n    selectionEndPoint && isKeySegment(selectionEndPoint.path[2])\n      ? selectionEndPoint.path[2]._key\n      : undefined\n\n  if (!focusTextBlock || !selectionEndPointChildKey) {\n    return undefined\n  }\n\n  let endPointChildFound = false\n  let inlineObject:\n    | {\n        node: PortableTextObject\n        path: ChildPath\n      }\n    | undefined\n\n  for (const child of focusTextBlock.node.children) {\n    if (child._key === selectionEndPointChildKey) {\n      endPointChildFound = true\n      continue\n    }\n\n    if (!isSpan(snapshot.context, child) && endPointChildFound) {\n      inlineObject = {\n        node: child,\n        path: [...focusTextBlock.path, 'children', {_key: child._key}],\n      }\n      break\n    }\n  }\n\n  return inlineObject\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockOffset} from '../types/block-offset'\nimport type {EditorSelection} from '../types/editor'\nimport {\n  blockOffsetToSpanSelectionPoint,\n  getBlockEndPoint,\n  getBlockStartPoint,\n  spanSelectionPointToBlockOffset,\n} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {getNextInlineObject} from './selector.get-next-inline-object'\nimport {getPreviousInlineObject} from './selector.get-previous-inline-object'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {getSelectionText} from './selector.get-selection-text'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n * Returns the selection of the of the word the caret is placed in.\n * Note: Only returns a word selection if the current selection is collapsed\n */\nexport const getCaretWordSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return null\n  }\n\n  if (!isSelectionCollapsed(snapshot)) {\n    return null\n  }\n\n  const focusTextBlock = getFocusTextBlock(snapshot)\n  const selectionStartPoint = getSelectionStartPoint(snapshot)\n  const selectionStartOffset = selectionStartPoint\n    ? spanSelectionPointToBlockOffset({\n        context: snapshot.context,\n        selectionPoint: selectionStartPoint,\n      })\n    : undefined\n\n  if (!focusTextBlock || !selectionStartPoint || !selectionStartOffset) {\n    return null\n  }\n\n  const previousInlineObject = getPreviousInlineObject(snapshot)\n  const blockStartPoint = getBlockStartPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textBefore = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: previousInlineObject\n          ? {path: previousInlineObject.path, offset: 0}\n          : blockStartPoint,\n        focus: selectionStartPoint,\n      },\n    },\n  })\n  const textDirectlyBefore = textBefore.split(/\\s+/).at(-1)\n\n  const nextInlineObject = getNextInlineObject(snapshot)\n  const blockEndPoint = getBlockEndPoint({\n    context: snapshot.context,\n    block: focusTextBlock,\n  })\n  const textAfter = getSelectionText({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: selectionStartPoint,\n        focus: nextInlineObject\n          ? {path: nextInlineObject.path, offset: 0}\n          : blockEndPoint,\n      },\n    },\n  })\n  const textDirectlyAfter = textAfter.split(/\\s+/).at(0)\n\n  if (\n    (textDirectlyBefore === undefined || textDirectlyBefore === '') &&\n    (textDirectlyAfter === undefined || textDirectlyAfter === '')\n  ) {\n    return null\n  }\n\n  const caretWordStartOffset: BlockOffset = textDirectlyBefore\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset - textDirectlyBefore.length,\n      }\n    : selectionStartOffset\n  const caretWordEndOffset: BlockOffset = textDirectlyAfter\n    ? {\n        ...selectionStartOffset,\n        offset: selectionStartOffset.offset + textDirectlyAfter.length,\n      }\n    : selectionStartOffset\n\n  const caretWordStartSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordStartOffset,\n    direction: 'backward',\n  })\n  const caretWordEndSelectionPoint = blockOffsetToSpanSelectionPoint({\n    context: snapshot.context,\n    blockOffset: caretWordEndOffset,\n    direction: 'forward',\n  })\n\n  if (!caretWordStartSelectionPoint || !caretWordEndSelectionPoint) {\n    return null\n  }\n\n  const caretWordSelection = {\n    anchor: caretWordStartSelectionPoint,\n    focus: caretWordEndSelectionPoint,\n  }\n\n  return isSelectionExpanded({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: caretWordSelection,\n    },\n  })\n    ? caretWordSelection\n    : null\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getFirstBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[0]\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getFocusBlockObject: EditorSelector<\n  {node: PortableTextObject; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusBlock = getFocusBlock(snapshot)\n\n  return focusBlock && !isTextBlock(snapshot.context, focusBlock.node)\n    ? {node: focusBlock.node, path: focusBlock.path}\n    : undefined\n}\n","import {isPortableTextSpan, type PortableTextObject} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {ChildPath} from '../types/paths'\nimport {getFocusChild} from './selector.get-focus-child'\n\n/**\n * @public\n */\nexport const getFocusInlineObject: EditorSelector<\n  {node: PortableTextObject; path: ChildPath} | undefined\n> = (snapshot) => {\n  const focusChild = getFocusChild(snapshot)\n\n  return focusChild && !isPortableTextSpan(focusChild.node)\n    ? {node: focusChild.node, path: focusChild.path}\n    : undefined\n}\n","import type {PortableTextListBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isListBlock} from '../internal-utils/parse-blocks'\nimport type {BlockPath} from '../types/paths'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\n\n/**\n * @public\n */\nexport const getFocusListBlock: EditorSelector<\n  {node: PortableTextListBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const focusTextBlock = getFocusTextBlock(snapshot)\n\n  return focusTextBlock && isListBlock(snapshot.context, focusTextBlock.node)\n    ? {node: focusTextBlock.node, path: focusTextBlock.path}\n    : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\n\n/**\n * @public\n */\nexport const getLastBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  const node = snapshot.context.value[snapshot.context.value.length - 1]\n    ? snapshot.context.value[snapshot.context.value.length - 1]\n    : undefined\n\n  return node ? {node, path: [{_key: node._key}]} : undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartPoint} from '../utils/util.get-selection-start-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionStartBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n\n  if (!startPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: startPoint,\n        focus: startPoint,\n      },\n    },\n  })\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const getPreviousBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  let previousBlock: {node: PortableTextBlock; path: BlockPath} | undefined\n  const selectionStartBlock = getSelectionStartBlock(snapshot)\n\n  if (!selectionStartBlock) {\n    return undefined\n  }\n\n  let foundSelectionStartBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionStartBlock.node._key) {\n      foundSelectionStartBlock = true\n      break\n    }\n\n    previousBlock = {node: block, path: [{_key: block._key}]}\n  }\n\n  if (foundSelectionStartBlock && previousBlock) {\n    return previousBlock\n  }\n\n  return undefined\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint} from '../utils/util.get-selection-end-point'\nimport {getFocusBlock} from './selector.get-focus-block'\n\n/**\n * @public\n */\nexport const getSelectionEndBlock: EditorSelector<\n  | {\n      node: PortableTextBlock\n      path: BlockPath\n    }\n  | undefined\n> = (snapshot) => {\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  if (!endPoint) {\n    return undefined\n  }\n\n  return getFocusBlock({\n    ...snapshot,\n    context: {\n      ...snapshot.context,\n      selection: {\n        anchor: endPoint,\n        focus: endPoint,\n      },\n    },\n  })\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\n\n/**\n * @public\n */\nexport const getNextBlock: EditorSelector<\n  {node: PortableTextBlock; path: BlockPath} | undefined\n> = (snapshot) => {\n  let nextBlock: {node: PortableTextBlock; path: BlockPath} | undefined\n  const selectionEndBlock = getSelectionEndBlock(snapshot)\n\n  if (!selectionEndBlock) {\n    return undefined\n  }\n\n  let foundSelectionEndBlock = false\n\n  for (const block of snapshot.context.value) {\n    if (block._key === selectionEndBlock.node._key) {\n      foundSelectionEndBlock = true\n      continue\n    }\n\n    if (foundSelectionEndBlock) {\n      nextBlock = {node: block, path: [{_key: block._key}]}\n      break\n    }\n  }\n\n  if (foundSelectionEndBlock && nextBlock) {\n    return nextBlock\n  }\n\n  return undefined\n}\n","import type {PortableTextTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getBlockKeyFromSelectionPoint} from '../selection/selection-point'\nimport type {BlockPath} from '../types/paths'\nimport {getSelectionEndPoint, getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport const getSelectedTextBlocks: EditorSelector<\n  Array<{node: PortableTextTextBlock; path: BlockPath}>\n> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return []\n  }\n\n  const selectedTextBlocks: Array<{\n    node: PortableTextTextBlock\n    path: BlockPath\n  }> = []\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return selectedTextBlocks\n  }\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      if (startBlockKey === endBlockKey) {\n        break\n      }\n      continue\n    }\n\n    if (block._key === endBlockKey) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n\n      break\n    }\n\n    if (selectedTextBlocks.length > 0) {\n      if (isTextBlock(snapshot.context, block)) {\n        selectedTextBlocks.push({node: block, path: [{_key: block._key}]})\n      }\n    }\n  }\n\n  return selectedTextBlocks\n}\n","import type {PortableTextSpan} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport {isSpan, isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelection, EditorSelectionPoint} from '../types/editor'\nimport {\n  getSelectionEndPoint,\n  getSelectionStartPoint,\n  isEmptyTextBlock,\n} from '../utils'\nimport {getFocusTextBlock} from './selector.get-focus-text-block'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport const getTrimmedSelection: EditorSelector<EditorSelection> = (\n  snapshot,\n) => {\n  if (!snapshot.context.selection) {\n    return snapshot.context.selection\n  }\n\n  const startPoint = getSelectionStartPoint(snapshot.context.selection)\n  const endPoint = getSelectionEndPoint(snapshot.context.selection)\n\n  const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n  const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n  const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n  const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n  if (!startBlockKey || !endBlockKey) {\n    return snapshot.context.selection\n  }\n\n  let startBlockFound = false\n  let adjustedStartPoint: EditorSelectionPoint | undefined\n  let trimStartPoint = false\n  let adjustedEndPoint: EditorSelectionPoint | undefined\n  let trimEndPoint = false\n  let previousPotentialEndpoint:\n    | {blockKey: string; span: PortableTextSpan}\n    | undefined\n\n  for (const block of snapshot.context.value) {\n    if (block._key === startBlockKey) {\n      startBlockFound = true\n\n      if (\n        isTextBlock(snapshot.context, block) &&\n        isEmptyTextBlock(snapshot.context, block)\n      ) {\n        continue\n      }\n    }\n\n    if (!startBlockFound) {\n      continue\n    }\n\n    if (!isTextBlock(snapshot.context, block)) {\n      continue\n    }\n\n    if (\n      block._key === endBlockKey &&\n      isEmptyTextBlock(snapshot.context, block)\n    ) {\n      break\n    }\n\n    for (const child of block.children) {\n      if (child._key === endChildKey) {\n        if (!isSpan(snapshot.context, child) || endPoint.offset === 0) {\n          adjustedEndPoint = previousPotentialEndpoint\n            ? {\n                path: [\n                  {_key: previousPotentialEndpoint.blockKey},\n                  'children',\n                  {_key: previousPotentialEndpoint.span._key},\n                ],\n                offset: previousPotentialEndpoint.span.text.length,\n              }\n            : undefined\n\n          trimEndPoint = true\n          break\n        }\n      }\n\n      if (trimStartPoint) {\n        const lonelySpan =\n          isSpan(snapshot.context, child) && block.children.length === 1\n\n        if (\n          (isSpan(snapshot.context, child) && child.text.length > 0) ||\n          lonelySpan\n        ) {\n          adjustedStartPoint = {\n            path: [{_key: block._key}, 'children', {_key: child._key}],\n            offset: 0,\n          }\n          previousPotentialEndpoint = {blockKey: block._key, span: child}\n          trimStartPoint = false\n        }\n\n        continue\n      }\n\n      if (child._key === startChildKey) {\n        if (!isSpan(snapshot.context, child)) {\n          trimStartPoint = true\n          continue\n        }\n\n        if (startPoint.offset === child.text.length) {\n          trimStartPoint = true\n          previousPotentialEndpoint =\n            child.text.length > 0\n              ? {blockKey: block._key, span: child}\n              : previousPotentialEndpoint\n          continue\n        }\n      }\n\n      previousPotentialEndpoint =\n        isSpan(snapshot.context, child) && child.text.length > 0\n          ? {blockKey: block._key, span: child}\n          : previousPotentialEndpoint\n    }\n\n    if (block._key === endBlockKey) {\n      break\n    }\n  }\n\n  const trimmedSelection = snapshot.context.selection.backward\n    ? {\n        anchor: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n        focus: adjustedStartPoint ?? startPoint,\n        backward: true,\n      }\n    : {\n        anchor: adjustedStartPoint ?? startPoint,\n        focus: trimEndPoint && adjustedEndPoint ? adjustedEndPoint : endPoint,\n      }\n\n  if (\n    isSelectionCollapsed({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n  ) {\n    const focusTextBlock = getFocusTextBlock({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: trimmedSelection,\n      },\n    })\n\n    if (\n      focusTextBlock &&\n      !isEmptyTextBlock(snapshot.context, focusTextBlock.node)\n    ) {\n      return null\n    }\n  }\n\n  return trimmedSelection\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {getSelectedBlocks} from './selector.get-selected-blocks'\n\n/**\n * @public\n */\nexport function isActiveAnnotation(\n  annotation: string,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    const selectedBlocks = getSelectedBlocks(snapshot)\n    const selectionMarkDefs = selectedBlocks.flatMap((block) =>\n      isTextBlock(snapshot.context, block.node)\n        ? (block.node.markDefs ?? [])\n        : [],\n    )\n    const activeMarkDefs = selectionMarkDefs.filter(\n      (markDef) =>\n        markDef._type === annotation &&\n        snapshot.beta.activeAnnotations.includes(markDef._key),\n    )\n\n    return activeMarkDefs.length > 0\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getSelectedSpans} from './selector.get-selected-spans'\nimport {isSelectionExpanded} from './selector.is-selection-expanded'\n\n/**\n * @public\n */\nexport function isActiveDecorator(decorator: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (isSelectionExpanded(snapshot)) {\n      const selectedSpans = getSelectedSpans(snapshot)\n\n      return (\n        selectedSpans.length > 0 &&\n        selectedSpans.every((span) => span.node.marks?.includes(decorator))\n      )\n    }\n\n    return snapshot.beta.activeDecorators.includes(decorator)\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveListItem} from './selector.get-active-list-item'\n\n/**\n * @public\n */\nexport function isActiveListItem(listItem: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeListItem = getActiveListItem(snapshot)\n\n    return activeListItem === listItem\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {getActiveStyle} from './selector.get-active-style'\n\n/**\n * @public\n */\nexport function isActiveStyle(style: string): EditorSelector<boolean> {\n  return (snapshot) => {\n    const activeStyle = getActiveStyle(snapshot)\n\n    return activeStyle === style\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheEndOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockEndPoint = utils.getBlockEndPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockEndPoint,\n    )\n  }\n}\n","import type {PortableTextBlock} from '@sanity/types'\nimport type {EditorSelector} from '../editor/editor-selector'\nimport type {BlockPath} from '../types/paths'\nimport * as utils from '../utils'\nimport {isSelectionCollapsed} from './selector.is-selection-collapsed'\n\n/**\n * @public\n */\nexport function isAtTheStartOfBlock(block: {\n  node: PortableTextBlock\n  path: BlockPath\n}): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection || !isSelectionCollapsed(snapshot)) {\n      return false\n    }\n\n    const blockStartPoint = utils.getBlockStartPoint({\n      context: snapshot.context,\n      block,\n    })\n\n    return utils.isEqualSelectionPoints(\n      snapshot.context.selection.focus,\n      blockStartPoint,\n    )\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionEndPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointAfterSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const endPoint = getSelectionEndPoint(snapshot.context.selection)\n    const endBlockKey = getBlockKeyFromSelectionPoint(endPoint)\n    const endChildKey = getChildKeyFromSelectionPoint(endPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !endBlockKey) {\n      return false\n    }\n\n    let after = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === endBlockKey) {\n        if (block._key !== pointBlockKey) {\n          after = true\n          break\n        }\n\n        // Both the point and the selection end in this block\n\n        if (!isTextBlock(snapshot.context, block)) {\n          break\n        }\n\n        if (!pointChildKey || !endChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === endChildKey) {\n            if (child._key !== pointChildKey) {\n              after = true\n              break\n            }\n\n            // Both the point and the selection end in this child\n\n            after = point.offset > endPoint.offset\n            break\n          }\n\n          if (child._key === pointChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === pointBlockKey) {\n        break\n      }\n    }\n\n    return after\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport {isTextBlock} from '../internal-utils/parse-blocks'\nimport {\n  getBlockKeyFromSelectionPoint,\n  getChildKeyFromSelectionPoint,\n} from '../selection/selection-point'\nimport type {EditorSelectionPoint} from '../types/editor'\nimport {getSelectionStartPoint} from '../utils'\n\n/**\n * @public\n */\nexport function isPointBeforeSelection(\n  point: EditorSelectionPoint,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!snapshot.context.selection) {\n      return false\n    }\n\n    const startPoint = getSelectionStartPoint(snapshot.context.selection)\n    const startBlockKey = getBlockKeyFromSelectionPoint(startPoint)\n    const startChildKey = getChildKeyFromSelectionPoint(startPoint)\n\n    const pointBlockKey = getBlockKeyFromSelectionPoint(point)\n    const pointChildKey = getChildKeyFromSelectionPoint(point)\n\n    if (!pointBlockKey || !startBlockKey) {\n      return false\n    }\n\n    let before = false\n\n    for (const block of snapshot.context.value) {\n      if (block._key === pointBlockKey) {\n        if (block._key !== startBlockKey) {\n          before = true\n          break\n        }\n\n        // Both the point and the selection start in this block\n\n        if (!isTextBlock(snapshot.context, block)) {\n          break\n        }\n\n        if (!pointChildKey || !startChildKey) {\n          break\n        }\n\n        for (const child of block.children) {\n          if (child._key === pointChildKey) {\n            if (child._key !== startChildKey) {\n              before = true\n              break\n            }\n\n            // Both the point and the selection start in this child\n\n            before = point.offset < startPoint.offset\n            break\n          }\n\n          if (child._key === startChildKey) {\n            break\n          }\n        }\n      }\n\n      if (block._key === startBlockKey) {\n        break\n      }\n    }\n\n    return before\n  }\n}\n","import type {EditorSelection} from '../types/editor'\nimport {isEqualSelectionPoints} from '../utils'\nimport type {EditorSelector} from './../editor/editor-selector'\nimport {getSelectionEndPoint} from './selector.get-selection-end-point'\nimport {getSelectionStartPoint} from './selector.get-selection-start-point'\nimport {isPointAfterSelection} from './selector.is-point-after-selection'\nimport {isPointBeforeSelection} from './selector.is-point-before-selection'\n\n/**\n * @public\n */\nexport function isOverlappingSelection(\n  selection: EditorSelection,\n): EditorSelector<boolean> {\n  return (snapshot) => {\n    if (!selection || !snapshot.context.selection) {\n      return false\n    }\n\n    const selectionStartPoint = getSelectionStartPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n    const selectionEndPoint = getSelectionEndPoint({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection,\n      },\n    })\n\n    const originalSelectionStartPoint = getSelectionStartPoint(snapshot)\n    const originalSelectionEndPoint = getSelectionEndPoint(snapshot)\n\n    if (\n      !selectionStartPoint ||\n      !selectionEndPoint ||\n      !originalSelectionStartPoint ||\n      !originalSelectionEndPoint\n    ) {\n      return false\n    }\n\n    const startPointBeforeSelection =\n      isPointBeforeSelection(selectionStartPoint)(snapshot)\n    const startPointAfterSelection =\n      isPointAfterSelection(selectionStartPoint)(snapshot)\n    const endPointBeforeSelection =\n      isPointBeforeSelection(selectionEndPoint)(snapshot)\n    const endPointAfterSelection =\n      isPointAfterSelection(selectionEndPoint)(snapshot)\n\n    const originalStartPointBeforeStartPoint = isPointBeforeSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n    const originalStartPointAfterStartPoint = isPointAfterSelection(\n      originalSelectionStartPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionStartPoint,\n          focus: selectionStartPoint,\n        },\n      },\n    })\n\n    const originalEndPointBeforeEndPoint = isPointBeforeSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n    const originalEndPointAfterEndPoint = isPointAfterSelection(\n      originalSelectionEndPoint,\n    )({\n      ...snapshot,\n      context: {\n        ...snapshot.context,\n        selection: {\n          anchor: selectionEndPoint,\n          focus: selectionEndPoint,\n        },\n      },\n    })\n\n    const endPointEqualToOriginalStartPoint = isEqualSelectionPoints(\n      selectionEndPoint,\n      originalSelectionStartPoint,\n    )\n    const startPointEqualToOriginalEndPoint = isEqualSelectionPoints(\n      selectionStartPoint,\n      originalSelectionEndPoint,\n    )\n\n    if (endPointBeforeSelection && !endPointEqualToOriginalStartPoint) {\n      return false\n    }\n\n    if (startPointAfterSelection && !startPointEqualToOriginalEndPoint) {\n      return false\n    }\n\n    if (\n      !originalStartPointBeforeStartPoint &&\n      originalStartPointAfterStartPoint &&\n      !originalEndPointBeforeEndPoint &&\n      originalEndPointAfterEndPoint\n    ) {\n      return !endPointEqualToOriginalStartPoint\n    }\n\n    if (\n      originalStartPointBeforeStartPoint &&\n      !originalStartPointAfterStartPoint &&\n      originalEndPointBeforeEndPoint &&\n      !originalEndPointAfterEndPoint\n    ) {\n      return !startPointEqualToOriginalEndPoint\n    }\n\n    if (\n      !startPointAfterSelection ||\n      !startPointBeforeSelection ||\n      !endPointAfterSelection ||\n      !endPointBeforeSelection\n    ) {\n      return true\n    }\n\n    return false\n  }\n}\n","import type {EditorSelector} from '../editor/editor-selector'\nimport * as utils from '../utils'\nimport {getSelectionEndBlock} from './selector.get-selection-end-block'\nimport {getSelectionStartBlock} from './selector.get-selection-start-block'\n\n/**\n * @public\n */\nexport const isSelectingEntireBlocks: EditorSelector<boolean> = (snapshot) => {\n  if (!snapshot.context.selection) {\n    return false\n  }\n\n  const startPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.focus\n    : snapshot.context.selection.anchor\n  const endPoint = snapshot.context.selection.backward\n    ? snapshot.context.selection.anchor\n    : snapshot.context.selection.focus\n\n  const startBlock = getSelectionStartBlock(snapshot)\n  const endBlock = getSelectionEndBlock(snapshot)\n\n  if (!startBlock || !endBlock) {\n    return false\n  }\n\n  const startBlockStartPoint = utils.getBlockStartPoint({\n    context: snapshot.context,\n    block: startBlock,\n  })\n  const endBlockEndPoint = utils.getBlockEndPoint({\n    context: snapshot.context,\n    block: endBlock,\n  })\n\n  return (\n    utils.isEqualSelectionPoints(startBlockStartPoint, startPoint) &&\n    utils.isEqualSelectionPoints(endBlockEndPoint, endPoint)\n  )\n}\n"],"names":["getSelectedBlocks","snapshot","context","selection","selectedBlocks","startPoint","getSelectionStartPoint","endPoint","getSelectionEndPoint","startKey","getBlockKeyFromSelectionPoint","endKey","block","value","_key","push","node","path","length","backward","anchor","focus","getSelectedSpans","selectedSpans","startBlockKey","endBlockKey","startSpanKey","getChildKeyFromSelectionPoint","endSpanKey","startBlockFound","isTextBlock","child","children","isSpan","offset","text","getActiveAnnotations","focusSpan","getFocusSpan","isSelectionCollapsed","activeAnnotations","beta","flatMap","markDefs","filter","markDef","includes","getActiveListItem","selectedTextBlocks","map","firstTextBlock","at","firstListItem","listItem","every","getActiveStyle","firstStyle","style","getNextInlineObject","focusTextBlock","getFocusTextBlock","selectionEndPoint","selectionEndPointChildKey","isKeySegment","undefined","endPointChildFound","inlineObject","getCaretWordSelection","selectionStartPoint","selectionStartOffset","spanSelectionPointToBlockOffset","selectionPoint","previousInlineObject","getPreviousInlineObject","blockStartPoint","getBlockStartPoint","textDirectlyBefore","getSelectionText","split","nextInlineObject","blockEndPoint","getBlockEndPoint","textDirectlyAfter","caretWordStartOffset","caretWordEndOffset","caretWordStartSelectionPoint","blockOffsetToSpanSelectionPoint","blockOffset","direction","caretWordEndSelectionPoint","caretWordSelection","isSelectionExpanded","getFirstBlock","getFocusBlockObject","focusBlock","getFocusBlock","getFocusInlineObject","focusChild","getFocusChild","isPortableTextSpan","getFocusListBlock","isListBlock","getLastBlock","getSelectionStartBlock","getPreviousBlock","previousBlock","selectionStartBlock","foundSelectionStartBlock","getSelectionEndBlock","getNextBlock","nextBlock","selectionEndBlock","foundSelectionEndBlock","getSelectedTextBlocks","getTrimmedSelection","startChildKey","endChildKey","adjustedStartPoint","trimStartPoint","adjustedEndPoint","trimEndPoint","previousPotentialEndpoint","isEmptyTextBlock","blockKey","span","lonelySpan","trimmedSelection","isActiveAnnotation","annotation","_type","isActiveDecorator","decorator","marks","activeDecorators","isActiveListItem","isActiveStyle","isAtTheEndOfBlock","utils","isAtTheStartOfBlock","isPointAfterSelection","point","pointBlockKey","pointChildKey","after","isPointBeforeSelection","before","isOverlappingSelection","originalSelectionStartPoint","originalSelectionEndPoint","startPointBeforeSelection","startPointAfterSelection","endPointBeforeSelection","endPointAfterSelection","originalStartPointBeforeStartPoint","originalStartPointAfterStartPoint","originalEndPointBeforeEndPoint","originalEndPointAfterEndPoint","endPointEqualToOriginalStartPoint","isEqualSelectionPoints","startPointEqualToOriginalEndPoint","isSelectingEntireBlocks","startBlock","endBlock","startBlockStartPoint","endBlockEndPoint"],"mappings":"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"}